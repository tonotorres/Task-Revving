{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\toni.torres\\\\Desktop\\\\Proyectos\\\\toni\\\\investment-poc\\\\src\\\\components\\\\RevenueSources.jsx\",\n  _s = $RefreshSig$();\n// src/components/RevenueSources.jsx\nimport React, { useState, useEffect } from 'react';\nimport './RevenueSources.css';\nimport revenueSources from '../assets/data/revenueSources'; // Importa los datos\nimport { generatePDF } from '../utils/pdfGenerator'; // Asumimos que tenemos una función para generar PDFs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RevenueSources() {\n  _s();\n  const [revenueSources, setRevenueSources] = useState([]);\n  useEffect(() => {\n    // Simula una solicitud Axios\n    const fetchData = async () => {\n      // Simula un retraso en la solicitud\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Ordena los datos alfabéticamente por nombre\n      const sortedData = [...revenueSources].sort((a, b) => a.revenue_source_name.localeCompare(b.revenue_source_name));\n      setRevenueSources(sortedData);\n    };\n    fetchData();\n  }, []);\n  const handleDownloadPDF = revenueSource => {\n    // Aquí iría la lógica para obtener los datos específicos de esta fuente de ingresos\n    // Por ahora, usaremos datos de ejemplo\n    const reportData = {\n      revenue_source_name: revenueSource.revenue_source_name,\n      customer_name: \"GuizmoGuru101\",\n      month_info: [{\n        month: \"2023-01\",\n        currency_code: \"GBP\",\n        sum: 118373\n      }, {\n        month: \"2023-02\",\n        currency_code: \"GBP\",\n        sum: 30749\n      }\n      // ... más datos mensuales\n      ]\n    };\n    generatePDF(reportData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"revenue-sources-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Revenue Sources\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"revenue-sources-list\",\n      children: revenueSources.map(source => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"revenue-source-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: source.revenue_source_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDownloadPDF(source),\n          className: \"download-pdf-btn\",\n          children: \"Download PDF Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, source.revenue_source_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(RevenueSources, \"0uiuMyjuO8qeGMeuZQT5ly07y4k=\");\n_c = RevenueSources;\nexport default RevenueSources;\nvar _c;\n$RefreshReg$(_c, \"RevenueSources\");","map":{"version":3,"names":["React","useState","useEffect","revenueSources","generatePDF","jsxDEV","_jsxDEV","RevenueSources","_s","setRevenueSources","fetchData","Promise","resolve","setTimeout","sortedData","sort","a","b","revenue_source_name","localeCompare","handleDownloadPDF","revenueSource","reportData","customer_name","month_info","month","currency_code","sum","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","source","onClick","revenue_source_id","_c","$RefreshReg$"],"sources":["C:/Users/toni.torres/Desktop/Proyectos/toni/investment-poc/src/components/RevenueSources.jsx"],"sourcesContent":["// src/components/RevenueSources.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './RevenueSources.css';\r\nimport revenueSources from '../assets/data/revenueSources'; // Importa los datos\r\nimport { generatePDF } from '../utils/pdfGenerator'; // Asumimos que tenemos una función para generar PDFs\r\n\r\nfunction RevenueSources() {\r\n  const [revenueSources, setRevenueSources] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Simula una solicitud Axios\r\n    const fetchData = async () => {\r\n      // Simula un retraso en la solicitud\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n      // Ordena los datos alfabéticamente por nombre\r\n      const sortedData = [...revenueSources].sort((a, b) => \r\n        a.revenue_source_name.localeCompare(b.revenue_source_name)\r\n      );\r\n\r\n      setRevenueSources(sortedData);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleDownloadPDF = (revenueSource) => {\r\n    // Aquí iría la lógica para obtener los datos específicos de esta fuente de ingresos\r\n    // Por ahora, usaremos datos de ejemplo\r\n    const reportData = {\r\n      revenue_source_name: revenueSource.revenue_source_name,\r\n      customer_name: \"GuizmoGuru101\",\r\n      month_info: [\r\n        { month: \"2023-01\", currency_code: \"GBP\", sum: 118373 },\r\n        { month: \"2023-02\", currency_code: \"GBP\", sum: 30749 },\r\n        // ... más datos mensuales\r\n      ]\r\n    };\r\n\r\n    generatePDF(reportData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"revenue-sources-container\">\r\n      <h2>Revenue Sources</h2>\r\n      <ul className=\"revenue-sources-list\">\r\n        {revenueSources.map(source => (\r\n          <li key={source.revenue_source_id} className=\"revenue-source-item\">\r\n            <span>{source.revenue_source_name}</span>\r\n            <button onClick={() => handleDownloadPDF(source)} className=\"download-pdf-btn\">\r\n              Download PDF Report\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RevenueSources;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,sBAAsB;AAC7B,OAAOC,cAAc,MAAM,+BAA+B,CAAC,CAAC;AAC5D,SAASC,WAAW,QAAQ,uBAAuB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACL,cAAc,EAAEM,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;MAEtD;MACA,MAAME,UAAU,GAAG,CAAC,GAAGX,cAAc,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAC/CD,CAAC,CAACE,mBAAmB,CAACC,aAAa,CAACF,CAAC,CAACC,mBAAmB,CAC3D,CAAC;MAEDT,iBAAiB,CAACK,UAAU,CAAC;IAC/B,CAAC;IAEDJ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,iBAAiB,GAAIC,aAAa,IAAK;IAC3C;IACA;IACA,MAAMC,UAAU,GAAG;MACjBJ,mBAAmB,EAAEG,aAAa,CAACH,mBAAmB;MACtDK,aAAa,EAAE,eAAe;MAC9BC,UAAU,EAAE,CACV;QAAEC,KAAK,EAAE,SAAS;QAAEC,aAAa,EAAE,KAAK;QAAEC,GAAG,EAAE;MAAO,CAAC,EACvD;QAAEF,KAAK,EAAE,SAAS;QAAEC,aAAa,EAAE,KAAK;QAAEC,GAAG,EAAE;MAAM;MACrD;MAAA;IAEJ,CAAC;IAEDvB,WAAW,CAACkB,UAAU,CAAC;EACzB,CAAC;EAED,oBACEhB,OAAA;IAAKsB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCvB,OAAA;MAAAuB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB3B,OAAA;MAAIsB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EACjC1B,cAAc,CAAC+B,GAAG,CAACC,MAAM,iBACxB7B,OAAA;QAAmCsB,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAChEvB,OAAA;UAAAuB,QAAA,EAAOM,MAAM,CAACjB;QAAmB;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACzC3B,OAAA;UAAQ8B,OAAO,EAAEA,CAAA,KAAMhB,iBAAiB,CAACe,MAAM,CAAE;UAACP,SAAS,EAAC,kBAAkB;UAAAC,QAAA,EAAC;QAE/E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GAJFE,MAAM,CAACE,iBAAiB;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAK7B,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACzB,EAAA,CAnDQD,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAqDvB,eAAeA,cAAc;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}